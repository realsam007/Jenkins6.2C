pipeline {
    agent any
    stages {
        // Stage 1: Build
        stage('Build') {
            steps {
                sh 'mvn clean package' // Use Maven
            }
        }

        // Stage 2: Unit and Integration Tests
        stage('Unit and Integration Tests') {
            steps {
                sh 'mvn test' // JUnit for unit tests
                sh 'npm run integration-test' // Example: Postman/Newman for API tests
            }
            post {
                always {
                    emailext (
                        subject: 'Test Results (Stage 2)',
                        body: 'Build Status: ${currentBuild.currentResult}. Check logs attached.',
                        to: 'your-email@example.com',
                        attachmentsPattern: '**/test-results/*.log'
                    )
                }
            }
        }

        // Stage 3: Code Analysis
        stage('Code Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        // Stage 4: Security Scan
        stage('Security Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan .', odcInstallation: 'OWASP-DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
            post {
                always {
                    emailext (
                        subject: 'Security Scan Results (Stage 4)',
                        body: 'Build Status: ${currentBuild.currentResult}. Check logs attached.',
                        to: 'your-email@example.com',
                        attachmentsPattern: '**/dependency-check-report.*'
                    )
                }
            }
        }

        // Stage 5: Deploy to Staging
        stage('Deploy to Staging') {
            steps {
                sshagent(['staging-server-key']) {
                    sh 'scp -r target/*.jar user@staging-ec2-ip:/app'
                }
            }
        }

        // Stage 6: Integration Tests on Staging
        stage('Integration Tests on Staging') {
            steps {
                sh 'npm run staging-integration-test' // Test against staging URL
            }
        }

        // Stage 7: Deploy to Production
        stage('Deploy to Production') {
            steps {
                sshagent(['production-server-key']) {
                    sh 'scp -r target/*.jar user@production-ec2-ip:/app'
                }
            }
        }
    }
    post {
        failure {
            emailext (
                subject: 'Pipeline Failed',
                body: 'Check build ${env.BUILD_URL}',
                to: 'your-email@example.com'
            )
        }
    }
}
